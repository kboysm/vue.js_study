{"remainingRequest":"C:\\Users\\lisha\\Desktop\\vue.js\\vue.js_study\\vuex-project\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\lisha\\Desktop\\vue.js\\vue.js_study\\vuex-project\\src\\store.js","dependencies":[{"path":"C:\\Users\\lisha\\Desktop\\vue.js\\vue.js_study\\vuex-project\\src\\store.js","mtime":1582324254921},{"path":"C:\\Users\\lisha\\Desktop\\vue.js\\vue.js_study\\vuex-project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1582304390855},{"path":"C:\\Users\\lisha\\Desktop\\vue.js\\vue.js_study\\vuex-project\\node_modules\\babel-loader\\lib\\index.js","mtime":1582304390608}],"contextDependencies":[],"result":["import Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    allUsers: [{\n      userId: 'hoza123',\n      password: '123',\n      name: 'Hoza',\n      address: 'Seoul',\n      src: 'https://goo.gl/oqLfJR'\n    }, {\n      userId: 'max123',\n      password: '456',\n      name: 'Max',\n      address: 'Berlin',\n      src: 'https://goo.gl/Ksk9B9'\n    }, {\n      userId: 'lego123',\n      password: '789',\n      name: 'Lego',\n      address: 'Busan',\n      src: 'https://goo.gl/x7SpCD'\n    }]\n  },\n  mutations: {//뮤테이션은 state값을 변화시키는 용도, 각각의 컴포넌트에서 state를 똑같이 변화시키면 코드의 중복이 발생 -> mutation등장!\n  },\n  actions: {},\n  getters: {\n    allUsersCount: function allUsersCount(state) {\n      return state.allUsers.length;\n    },\n    countOfSeoul: function countOfSeoul(state) {\n      var count = 0;\n      state.allUsers.map(function (user) {\n        if (user.address === 'Seoul') count++;\n      });\n      return count;\n    },\n    percentOfSeoul: function percentOfSeoul(state, getters) {\n      return Math.round(getters.countOfSeoul / getters.allUsersCount * 100);\n    }\n  }\n});",{"version":3,"sources":["C:/Users/lisha/Desktop/vue.js/vue.js_study/vuex-project/src/store.js"],"names":["Vue","Vuex","use","Store","state","allUsers","userId","password","name","address","src","mutations","actions","getters","allUsersCount","length","countOfSeoul","count","map","user","percentOfSeoul","Math","round"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEAD,GAAG,CAACE,GAAJ,CAAQD,IAAR;AAEA,eAAe,IAAIA,IAAI,CAACE,KAAT,CAAe;AAC5BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAC,CACP;AAACC,MAAAA,MAAM,EAAE,SAAT;AAAoBC,MAAAA,QAAQ,EAAE,KAA9B;AAAqCC,MAAAA,IAAI,EAAE,MAA3C;AAAmDC,MAAAA,OAAO,EAAE,OAA5D;AAAqEC,MAAAA,GAAG,EAAC;AAAzE,KADO,EAEP;AAACJ,MAAAA,MAAM,EAAE,QAAT;AAAmBC,MAAAA,QAAQ,EAAE,KAA7B;AAAoCC,MAAAA,IAAI,EAAE,KAA1C;AAAiDC,MAAAA,OAAO,EAAE,QAA1D;AAAoEC,MAAAA,GAAG,EAAC;AAAxE,KAFO,EAGP;AAACJ,MAAAA,MAAM,EAAE,SAAT;AAAoBC,MAAAA,QAAQ,EAAE,KAA9B;AAAqCC,MAAAA,IAAI,EAAE,MAA3C;AAAmDC,MAAAA,OAAO,EAAE,OAA5D;AAAqEC,MAAAA,GAAG,EAAC;AAAzE,KAHO;AADJ,GADqB;AAQ5BC,EAAAA,SAAS,EAAE,CACT;AADS,GARiB;AAW5BC,EAAAA,OAAO,EAAE,EAXmB;AAc5BC,EAAAA,OAAO,EAAC;AACNC,IAAAA,aADM,yBACQV,KADR,EACc;AAClB,aAAOA,KAAK,CAACC,QAAN,CAAeU,MAAtB;AACD,KAHK;AAINC,IAAAA,YAAY,EAAE,sBAAAZ,KAAK,EAAG;AACpB,UAAIa,KAAK,GAAE,CAAX;AACAb,MAAAA,KAAK,CAACC,QAAN,CAAea,GAAf,CAAmB,UAAAC,IAAI,EAAG;AACxB,YAAGA,IAAI,CAACV,OAAL,KAAe,OAAlB,EAA2BQ,KAAK;AACjC,OAFD;AAGA,aAAOA,KAAP;AACD,KAVK;AAWNG,IAAAA,cAAc,EAAE,wBAAChB,KAAD,EAAOS,OAAP,EAAkB;AAChC,aAAOQ,IAAI,CAACC,KAAL,CAAWT,OAAO,CAACG,YAAR,GAAqBH,OAAO,CAACC,aAA7B,GAA4C,GAAvD,CAAP;AACD;AAbK;AAdoB,CAAf,CAAf","sourcesContent":["import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex)\r\n\r\nexport default new Vuex.Store({\r\n  state: {\r\n    allUsers:[\r\n      {userId: 'hoza123', password: '123', name: 'Hoza', address: 'Seoul', src:'https://goo.gl/oqLfJR'},\r\n      {userId: 'max123', password: '456', name: 'Max', address: 'Berlin', src:'https://goo.gl/Ksk9B9'},\r\n      {userId: 'lego123', password: '789', name: 'Lego', address: 'Busan', src:'https://goo.gl/x7SpCD'}\r\n    ]\r\n  },\r\n  mutations: {\r\n    //뮤테이션은 state값을 변화시키는 용도, 각각의 컴포넌트에서 state를 똑같이 변화시키면 코드의 중복이 발생 -> mutation등장!\r\n  },\r\n  actions: {\r\n\r\n  },\r\n  getters:{\r\n    allUsersCount(state){\r\n      return state.allUsers.length;\r\n    },\r\n    countOfSeoul: state =>{\r\n      let count =0;\r\n      state.allUsers.map(user =>{\r\n        if(user.address==='Seoul') count++\r\n      })\r\n      return count\r\n    },\r\n    percentOfSeoul: (state,getters) =>{\r\n      return Math.round(getters.countOfSeoul/getters.allUsersCount *100)\r\n    }\r\n  }\r\n})\r\n"]}]}